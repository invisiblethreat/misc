#!/bin/bash
[ ${DEBUG:=0} -eq 1 ] && set -x

make_bash()
{

cat << BASH_EOT > $1
#!/bin/bash
# If envar DEBUG isn't 0, print every command as it takes place
[ \${DEBUG:=0} -eq 1 ] && set -x

IFS=$'\n\t'
# $* is all arguments passed in as a string
# $@ is all arguments passed as an array 
# IFS dictates how the above are treated and the defaut IFS is " "

# Exit on error
set -euo pipefail

function success() {
  COL='\033[0;32m'
  RST='\033[0m'
  printf "\${COL}\$1\${RST}\n"
}

function error() {
  COL='\033[0;31m'
  RST='\033[0m'
  printf "\${COL}\$1\${RST}\n"
}

function warn() {
  COL='\033[0;33m'
  RST='\033[0m'
  printf "\${COL}\$1\${RST}\n"
}

function error_exit() {
  error "Failed to complete script"

}
trap error_exit ERR

help()
{
     printf "Usage: \$0 <flags> -d<ebug>(optional)\n"
}

#######################################################################

#options with trailing ':' need to have an argument specified
while getopts ":c:abdh" OPTION
do
  case \$OPTION in
    h ) help
      exit 0
      ;;

    a ) A="1"
      ;;

    b ) B="1"
      ;;

    c ) SCRIPT=\$OPTARG
      ;;

    d ) set -x
      ;;

    * ) printf "Invalid flag.\n"
      help
      exit 1
      ;;
  esac
done

DEFAULT=${1:-default}
#echo "Prompt for input"
#read -p "Proceed? " -n 1 -r
#echo
#if [[ $REPLY =~ ^[Yy]$  ]]; then
#  #do things here
#else
#  success "Not proceeding"
#  exit 0
#fi

if [ \$A -eq 1 ]
then
{
     #test here and execute
}
fi
BASH_EOT

}

make_perl()
{

cat << PERL_EOT > $1
#!/usr/bin/perl
#
use warnings;
use vars qw/ %opt /;

sub init()
{
    use Getopt::Std;
    my $opt_string = 'hvdf:';
    getopts( "$opt_string", \%opt ) or usage();
    usage() if $opt{h};
}

sub usage()
{
    print STDERR << "EOF";
    usage: $0 [-hvd] [-f file]

     -h        : this (help) message
     -v        : verbose output
     -d        : print debugging messages to stderr
     -f file   : file containing something

    example: $0 -v -d -f file

    EOF
        exit;
}

#######################################################################
init();

print STDERR "Verbose mode ON.\n" if $opt{v};
print STDERR "Debugging mode ON.\n" if $opt{d};
PERL_EOT
}

make_python()
{
cat << PY_EOT > $1
#!/usr/bin/env python
import argparse
import sys

parser = argparse.ArgumentParser()

parser.add_argument("-c", "--config", default='', help="config file to use.")
parser.add_argument("-n", "--name", default='scripted_scan', help="name of item.")

args = parser.parse_args()

if not args.config:
    print "No config!"
      sys.exit(1)
PY_EOT
}

help()
{
    printf "$0 - Quick Templating of scripts\n"
    printf "Usage: $0 -b<bash> xor -y<python> xor -p<perl> <filename> -d<ebug>(optional)\n"
}

#######################################################################

while getopts ":b:p:y:dh" OPTION
do
  case $OPTION in
    h ) help
      exit 0
      ;;

    b ) make_bash $OPTARG
      ;;

    p ) make_perl $OPTARG
      ;;

    y ) make_python $OPTARG
     ;;

    d ) set -x
      ;;

    * ) printf "Invalid flag.\n"
      help
      exit 1
      ;;
  esac
done

if [ "$#" -lt "2" ]
then
{
    help
    exit 1
}
fi
